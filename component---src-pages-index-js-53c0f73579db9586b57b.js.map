{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/pages/index.js"],"names":["BlogIndex","location","data","siteTitle","site","siteMetadata","title","allMarkdownRemark","edges","keywords","description","className","href","props","query","render"],"mappings":"mHAAA,qB,kCCAA,oEAUMA,GAVN,8BAUkB,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACbC,EAAYD,EAAKE,KAAKC,aAAaC,MAC3BJ,EAAKK,kBAAkBC,MAGrC,OACE,kBAAC,IAAD,CAAQF,MAAOH,GACf,kBAAC,IAAD,CACAG,MAAM,OACNG,SAAU,CAAC,OAAD,0DAGTP,EAAKE,KAAKC,aAAaK,aACpB,4BAAQC,UAAU,aAClB,wBAAIA,UAAU,mBACbT,EAAKE,KAAKC,aAAaK,aAExB,4BACA,uBAAGE,KAAK,QAAQD,UAAU,gBAA1B,kBA2CO,mBAAAE,GAAK,OAClB,kBAAC,cAAD,CACAC,MAnCc,aAoCdC,OAAQ,SAAAb,GAAI,OACV,kBAACF,EAAD,eAAWC,SAAUY,EAAMZ,SAAUY,OAAK,EAACX,KAAMA,GAAUW,S","file":"component---src-pages-index-js-53c0f73579db9586b57b.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n        })`,\n      }\n    }\n  >\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\n      <div className=\"post-card-content\">\n        <h2 className=\"post-card-title\">\n          {props.node.frontmatter.title || props.node.fields.slug}\n        </h2>\n      </div>\n    </Link>\n  </article>\n)\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\n// import \"../utils/global.scss\"\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle}>\n    <SEO\n    title=\"Home\"\n    keywords={[`blog`, `gatsby`, `javascript`, `react`, `skincare`, `quiz`, `skin`]}\n    />\n    {/* <Bio /> */}\n    {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n        <h2 className=\"page-head-title\">\n        {data.site.siteMetadata.description}\n        </h2>\n        <h2>\n        <a href=\"/quiz\" className=\"button large\">\n        Take Quiz\n        </a>\n        </h2>\n        </header>\n    )}\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n  query={indexQuery}\n  render={data => (\n    <BlogIndex location={props.location} props data={data} {...props} />\n  )}\n  />\n)\n"],"sourceRoot":""}